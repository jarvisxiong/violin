//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package com.caucho.hessian.io;

import com.caucho.burlap.io.BurlapRemoteObject;
import com.caucho.hessian.io.AbstractHessianInput;
import com.caucho.hessian.io.AbstractSerializerFactory;
import com.caucho.hessian.io.ArrayDeserializer;
import com.caucho.hessian.io.ArraySerializer;
import com.caucho.hessian.io.BasicDeserializer;
import com.caucho.hessian.io.BasicSerializer;
import com.caucho.hessian.io.CalendarSerializer;
import com.caucho.hessian.io.ClassDeserializer;
import com.caucho.hessian.io.ClassSerializer;
import com.caucho.hessian.io.CollectionDeserializer;
import com.caucho.hessian.io.CollectionSerializer;
import com.caucho.hessian.io.Deserializer;
import com.caucho.hessian.io.EnumDeserializer;
import com.caucho.hessian.io.EnumSerializer;
import com.caucho.hessian.io.EnumerationDeserializer;
import com.caucho.hessian.io.EnumerationSerializer;
import com.caucho.hessian.io.HessianHandle;
import com.caucho.hessian.io.HessianProtocolException;
import com.caucho.hessian.io.HessianRemoteObject;
import com.caucho.hessian.io.InputStreamDeserializer;
import com.caucho.hessian.io.InputStreamSerializer;
import com.caucho.hessian.io.IteratorSerializer;
import com.caucho.hessian.io.JavaDeserializer;
import com.caucho.hessian.io.JavaSerializer;
import com.caucho.hessian.io.LocaleSerializer;
import com.caucho.hessian.io.MapDeserializer;
import com.caucho.hessian.io.MapSerializer;
import com.caucho.hessian.io.RemoteSerializer;
import com.caucho.hessian.io.Serializer;
import com.caucho.hessian.io.SqlDateDeserializer;
import com.caucho.hessian.io.SqlDateSerializer;
import com.caucho.hessian.io.StackTraceElementDeserializer;
import com.caucho.hessian.io.StringValueDeserializer;
import com.caucho.hessian.io.StringValueSerializer;
import com.caucho.hessian.io.ThrowableSerializer;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

public class SerializerFactory extends AbstractSerializerFactory {
    private static final Logger log = Logger.getLogger(SerializerFactory.class.getName());
    private static Deserializer OBJECT_DESERIALIZER = new BasicDeserializer(13);
    private static HashMap _staticSerializerMap = new HashMap();
    private static HashMap _staticDeserializerMap = new HashMap();
    private static HashMap _staticTypeMap = new HashMap();
    protected Serializer _defaultSerializer;
    protected ArrayList _factories = new ArrayList();
    protected CollectionSerializer _collectionSerializer;
    protected MapSerializer _mapSerializer;
    private Deserializer _hashMapDeserializer;
    private HashMap _cachedSerializerMap;
    private HashMap _cachedDeserializerMap;
    private HashMap _cachedTypeDeserializerMap;
    private boolean _isAllowNonSerializable;

    public SerializerFactory() {
    }

    public void setSendCollectionType(boolean isSendType) {
        if(this._collectionSerializer == null) {
            this._collectionSerializer = new CollectionSerializer();
        }

        this._collectionSerializer.setSendJavaType(isSendType);
        if(this._mapSerializer == null) {
            this._mapSerializer = new MapSerializer();
        }

        this._mapSerializer.setSendJavaType(isSendType);
    }

    public void addFactory(AbstractSerializerFactory factory) {
        this._factories.add(factory);
    }

    public void setAllowNonSerializable(boolean allow) {
        this._isAllowNonSerializable = allow;
    }

    public boolean isAllowNonSerializable() {
        return this._isAllowNonSerializable;
    }

    public Serializer getSerializer(Class cl) throws HessianProtocolException {
        Object serializer = (Serializer)_staticSerializerMap.get(cl);
        if(serializer != null) {
            return (Serializer)serializer;
        } else {
            HashMap i;
            if(this._cachedSerializerMap != null) {
                i = this._cachedSerializerMap;
                synchronized(this._cachedSerializerMap) {
                    serializer = (Serializer)this._cachedSerializerMap.get(cl);
                }

                if(serializer != null) {
                    return (Serializer)serializer;
                }
            }

            for(int var8 = 0; serializer == null && this._factories != null && var8 < this._factories.size(); ++var8) {
                AbstractSerializerFactory factory = (AbstractSerializerFactory)this._factories.get(var8);
                serializer = factory.getSerializer(cl);
            }

            if(serializer == null) {
                if(JavaSerializer.getWriteReplace(cl) != null) {
                    serializer = new JavaSerializer(cl);
                } else if(HessianRemoteObject.class.isAssignableFrom(cl)) {
                    serializer = new RemoteSerializer();
                } else if(BurlapRemoteObject.class.isAssignableFrom(cl)) {
                    serializer = new RemoteSerializer();
                } else if(Map.class.isAssignableFrom(cl)) {
                    if(this._mapSerializer == null) {
                        this._mapSerializer = new MapSerializer();
                    }

                    serializer = this._mapSerializer;
                } else if(Collection.class.isAssignableFrom(cl)) {
                    if(this._collectionSerializer == null) {
                        this._collectionSerializer = new CollectionSerializer();
                    }

                    serializer = this._collectionSerializer;
                } else if(cl.isArray()) {
                    serializer = new ArraySerializer();
                } else if(Throwable.class.isAssignableFrom(cl)) {
                    serializer = new ThrowableSerializer(cl);
                } else if(InputStream.class.isAssignableFrom(cl)) {
                    serializer = new InputStreamSerializer();
                } else if(Iterator.class.isAssignableFrom(cl)) {
                    serializer = IteratorSerializer.create();
                } else if(Enumeration.class.isAssignableFrom(cl)) {
                    serializer = EnumerationSerializer.create();
                } else if(Calendar.class.isAssignableFrom(cl)) {
                    serializer = CalendarSerializer.create();
                } else if(Locale.class.isAssignableFrom(cl)) {
                    serializer = LocaleSerializer.create();
                } else if(Enum.class.isAssignableFrom(cl)) {
                    serializer = new EnumSerializer(cl);
                }
            }

            if(serializer == null) {
                serializer = this.getDefaultSerializer(cl);
            }

            if(this._cachedSerializerMap == null) {
                this._cachedSerializerMap = new HashMap(8);
            }

            i = this._cachedSerializerMap;
            synchronized(this._cachedSerializerMap) {
                this._cachedSerializerMap.put(cl, serializer);
                return (Serializer)serializer;
            }
        }
    }

    protected Serializer getDefaultSerializer(Class cl) {
        if(this._defaultSerializer != null) {
            return this._defaultSerializer;
        } else if(!Serializable.class.isAssignableFrom(cl) && !this._isAllowNonSerializable) {
            throw new IllegalStateException("Serialized class " + cl.getName() + " must implement java.io.Serializable");
        } else {
            return new JavaSerializer(cl);
        }
    }

    public Deserializer getDeserializer(Class cl) throws HessianProtocolException {
        Object deserializer = (Deserializer)_staticDeserializerMap.get(cl);
        if(deserializer != null) {
            return (Deserializer)deserializer;
        } else {
            HashMap i;
            if(this._cachedDeserializerMap != null) {
                i = this._cachedDeserializerMap;
                synchronized(this._cachedDeserializerMap) {
                    deserializer = (Deserializer)this._cachedDeserializerMap.get(cl);
                }

                if(deserializer != null) {
                    return (Deserializer)deserializer;
                }
            }

            for(int var8 = 0; deserializer == null && this._factories != null && var8 < this._factories.size(); ++var8) {
                AbstractSerializerFactory factory = (AbstractSerializerFactory)this._factories.get(var8);
                deserializer = factory.getDeserializer(cl);
            }

            if(deserializer == null) {
                if(Collection.class.isAssignableFrom(cl)) {
                    deserializer = new CollectionDeserializer(cl);
                } else if(Map.class.isAssignableFrom(cl)) {
                    deserializer = new MapDeserializer(cl);
                } else if(cl.isInterface()) {
                    deserializer = OBJECT_DESERIALIZER;
                } else if(cl.isArray()) {
                    deserializer = new ArrayDeserializer(cl.getComponentType());
                } else if(Enumeration.class.isAssignableFrom(cl)) {
                    deserializer = EnumerationDeserializer.create();
                } else if(Enum.class.isAssignableFrom(cl)) {
                    deserializer = new EnumDeserializer(cl);
                } else {
                    deserializer = this.getDefaultDeserializer(cl);
                }
            }

            if(this._cachedDeserializerMap == null) {
                this._cachedDeserializerMap = new HashMap(8);
            }

            i = this._cachedDeserializerMap;
            synchronized(this._cachedDeserializerMap) {
                this._cachedDeserializerMap.put(cl, deserializer);
                return (Deserializer)deserializer;
            }
        }
    }

    protected Deserializer getDefaultDeserializer(Class cl) {
        return new JavaDeserializer(cl);
    }

    public Object readList(AbstractHessianInput in, int length, String type) throws HessianProtocolException, IOException {
        Deserializer deserializer = this.getDeserializer((String)type);
        return deserializer != null?deserializer.readList(in, length):(new CollectionDeserializer(ArrayList.class)).readList(in, length);
    }

    public Object readMap(AbstractHessianInput in, String type) throws HessianProtocolException, IOException {
        Deserializer deserializer = this.getDeserializer((String)type);
        if(deserializer != null) {
            return deserializer.readMap(in);
        } else if(this._hashMapDeserializer != null) {
            return this._hashMapDeserializer.readMap(in);
        } else {
            this._hashMapDeserializer = new MapDeserializer(HashMap.class);
            return this._hashMapDeserializer.readMap(in);
        }
    }

    public Object readObject(AbstractHessianInput in, String type, String[] fieldNames) throws HessianProtocolException, IOException {
        Deserializer deserializer = this.getDeserializer((String)type);
        if(deserializer != null) {
            return deserializer.readObject(in, fieldNames);
        } else if(this._hashMapDeserializer != null) {
            return this._hashMapDeserializer.readObject(in, fieldNames);
        } else {
            this._hashMapDeserializer = new MapDeserializer(HashMap.class);
            return this._hashMapDeserializer.readObject(in, fieldNames);
        }
    }

    public Deserializer getObjectDeserializer(String type, Class cl) throws HessianProtocolException {
        Deserializer reader = this.getObjectDeserializer(type);
        if(cl != null && cl != reader.getType() && !cl.isAssignableFrom(reader.getType()) && !HessianHandle.class.isAssignableFrom(reader.getType())) {
            if(log.isLoggable(Level.FINE)) {
                log.fine("hessian: expected \'" + cl.getName() + "\' at \'" + type + "\'");
            }

            return this.getDeserializer((Class)cl);
        } else {
            return reader;
        }
    }

    public Deserializer getObjectDeserializer(String type) throws HessianProtocolException {
        Deserializer deserializer = this.getDeserializer((String)type);
        if(deserializer != null) {
            return deserializer;
        } else if(this._hashMapDeserializer != null) {
            return this._hashMapDeserializer;
        } else {
            this._hashMapDeserializer = new MapDeserializer(HashMap.class);
            return this._hashMapDeserializer;
        }
    }

    public Deserializer getDeserializer(String type) throws HessianProtocolException {
        if(type != null && !type.equals("")) {
            HashMap loader;
            if(this._cachedTypeDeserializerMap != null) {
                loader = this._cachedTypeDeserializerMap;
                Deserializer deserializer;
                synchronized(this._cachedTypeDeserializerMap) {
                    deserializer = (Deserializer)this._cachedTypeDeserializerMap.get(type);
                }

                if(deserializer != null) {
                    return deserializer;
                }
            }

            Object deserializer1 = (Deserializer)_staticTypeMap.get(type);
            if(deserializer1 != null) {
                return (Deserializer)deserializer1;
            } else {
                if(type.startsWith("[")) {
                    Deserializer loader1 = this.getDeserializer((String)type.substring(1));
                    if(loader1 != null) {
                        deserializer1 = new ArrayDeserializer(loader1.getType());
                    } else {
                        deserializer1 = new ArrayDeserializer(Object.class);
                    }
                } else {
                    ClassLoader loader2 = Thread.currentThread().getContextClassLoader();

                    try {
                        Class e = Class.forName(type, false, loader2);
                        deserializer1 = this.getDeserializer((Class)e);
                    } catch (Exception var7) {
                        log.warning("Hessian/Burlap: \'" + type + "\' is an unknown class in " + loader2 + ":\n" + var7);
                        log.log(Level.FINER, var7.toString(), var7);
                    }
                }

                if(deserializer1 != null) {
                    if(this._cachedTypeDeserializerMap == null) {
                        this._cachedTypeDeserializerMap = new HashMap(8);
                    }

                    loader = this._cachedTypeDeserializerMap;
                    synchronized(this._cachedTypeDeserializerMap) {
                        this._cachedTypeDeserializerMap.put(type, deserializer1);
                    }
                }

                return (Deserializer)deserializer1;
            }
        } else {
            return null;
        }
    }

    private static void addBasic(Class cl, String typeName, int type) {
        _staticSerializerMap.put(cl, new BasicSerializer(type));
        BasicDeserializer deserializer = new BasicDeserializer(type);
        _staticDeserializerMap.put(cl, deserializer);
        _staticTypeMap.put(typeName, deserializer);
    }

    static {
        addBasic(Void.TYPE, "void", 0);
        addBasic(Boolean.class, "boolean", 1);
        addBasic(Byte.class, "byte", 2);
        addBasic(Short.class, "short", 3);
        addBasic(Integer.class, "int", 4);
        addBasic(Long.class, "long", 5);
        addBasic(Float.class, "float", 6);
        addBasic(Double.class, "double", 7);
        addBasic(Character.class, "char", 9);
        addBasic(String.class, "string", 10);
        addBasic(Object.class, "object", 13);
        addBasic(Date.class, "date", 11);
        addBasic(Boolean.TYPE, "boolean", 1);
        addBasic(Byte.TYPE, "byte", 2);
        addBasic(Short.TYPE, "short", 3);
        addBasic(Integer.TYPE, "int", 4);
        addBasic(Long.TYPE, "long", 5);
        addBasic(Float.TYPE, "float", 6);
        addBasic(Double.TYPE, "double", 7);
        addBasic(Character.TYPE, "char", 8);
        addBasic(boolean[].class, "[boolean", 14);
        addBasic(byte[].class, "[byte", 15);
        addBasic(short[].class, "[short", 16);
        addBasic(int[].class, "[int", 17);
        addBasic(long[].class, "[long", 18);
        addBasic(float[].class, "[float", 19);
        addBasic(double[].class, "[double", 20);
        addBasic(char[].class, "[char", 21);
        addBasic(String[].class, "[string", 22);
        addBasic(Object[].class, "[object", 23);
        _staticSerializerMap.put(Class.class, new ClassSerializer());
        _staticDeserializerMap.put(Class.class, new ClassDeserializer());
        _staticDeserializerMap.put(Number.class, new BasicDeserializer(12));
        _staticSerializerMap.put(BigDecimal.class, new StringValueSerializer());

        try {
            _staticDeserializerMap.put(BigDecimal.class, new StringValueDeserializer(BigDecimal.class));
        } catch (Throwable var4) {
            ;
        }

        _staticSerializerMap.put(File.class, new StringValueSerializer());

        try {
            _staticDeserializerMap.put(File.class, new StringValueDeserializer(File.class));
        } catch (Throwable var3) {
            ;
        }

        _staticSerializerMap.put(java.sql.Date.class, new SqlDateSerializer());
        _staticSerializerMap.put(Time.class, new SqlDateSerializer());
        _staticSerializerMap.put(Timestamp.class, new SqlDateSerializer());
        _staticSerializerMap.put(InputStream.class, new InputStreamSerializer());
        _staticDeserializerMap.put(InputStream.class, new InputStreamDeserializer());

        try {
            _staticDeserializerMap.put(java.sql.Date.class, new SqlDateDeserializer(java.sql.Date.class));
            _staticDeserializerMap.put(Time.class, new SqlDateDeserializer(Time.class));
            _staticDeserializerMap.put(Timestamp.class, new SqlDateDeserializer(Timestamp.class));
        } catch (Throwable var2) {
            var2.printStackTrace();
        }

        try {
            Class e = Class.forName("java.lang.StackTraceElement");
            _staticDeserializerMap.put(e, new StackTraceElementDeserializer());
        } catch (Throwable var1) {
            ;
        }

    }
}